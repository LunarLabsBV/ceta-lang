program             : statement*

statement           : expression_statement
                    | variable_declaration
                    | if_statement
                    | while_statement
                    | print_statement
                    | function_declaration
                    | return_statement

expression_statement: expression ';'
variable_declaration: 'var' IDENTIFIER '=' expression ';'
if_statement        : 'if' '(' expression ')' '{' statement* '}' ('else' '{' statement* '}')?
while_statement     : 'while' '(' expression ')' '{' statement* '}'
print_statement     : 'print' '(' expression ')' ';'
function_declaration: 'func' IDENTIFIER '(' parameters? ')' '{' statement* '}'
return_statement    : 'return' expression ';'

expression          : literal
                    | IDENTIFIER
                    | expression BINARY_OP expression
                    | UNARY_OP expression
                    | '(' expression ')'

literal             : NUMBER | STRING | BOOLEAN

parameters          : IDENTIFIER (',' IDENTIFIER)*

NUMBER              : [0-9]+ ('.' [0-9]+)?
STRING              : '"' .*? '"'
BOOLEAN             : 'true' | 'false'
IDENTIFIER          : [a-zA-Z_][a-zA-Z0-9_]*
BINARY_OP           : '+' | '-' | '*' | '/' | '==' | '!=' | '<' | '>' | '<=' | '>=' | '&&' | '||'
UNARY_OP            : '-' | '!'

class Interpreter:
    def __init__(self):
        self.variables = {}

    def interpret(self, ast):
        for statement in ast:
            self.execute(statement)

    def execute(self, statement):
        if isinstance(statement, VariableDeclaration):
            self.variables[statement.identifier] = self.evaluate(statement.expression)
        elif isinstance(statement, PrintStatement):
            print(self.evaluate(statement.expression))
        elif isinstance(statement, IfStatement):
            if self.evaluate(statement.condition):
                self.interpret(statement.true_statements)
            elif statement.false_statements:
                self.interpret(statement.false_statements)
        elif isinstance(statement, WhileStatement):
            while self.evaluate(statement.condition):
                self.interpret(statement.statements)
        # Add support for other statement types

    def evaluate(self, expression):
        if isinstance(expression, Literal):
            return expression.value
        elif isinstance(expression, BinaryExpression):
            left = self.evaluate(expression.left)
            right = self.evaluate(expression.right)
            if expression.operator == '+':
                return left + right
            elif expression.operator == '-':
                return left - right
            elif expression.operator == '*':
                return left * right
            elif expression.operator == '/':
                return left / right
            # Add support for other operators
        elif isinstance(expression, UnaryExpression):
            value = self.evaluate(expression.expression)
            if expression.operator == '-':
                return -value
            elif expression.operator == '!':
                return not value
        elif isinstance(expression, Identifier):
            return self.variables.get(expression.name)


# Define classes for AST nodes
class VariableDeclaration:
    def __init__(self, identifier, expression):
        self.identifier = identifier
        self.expression = expression


class PrintStatement:
    def __init__(self, expression):
        self.expression = expression


class IfStatement:
    def __init__(self, condition, true_statements, false_statements=None):
        self.condition = condition
        self.true_statements = true_statements
        self.false_statements = false_statements


class WhileStatement:
    def __init__(self, condition, statements):
        self.condition = condition
        self.statements = statements


class BinaryExpression:
    def __init__(self, operator, left, right):
        self.operator = operator
        self.left = left
        self.right = right


class UnaryExpression:
    def __init__(self, operator, expression):
        self.operator = operator
        self.expression = expression


class Literal:
    def __init__(self, value):
        self.value = value


class Identifier:
    def __init__(self, name):
        self.name = name


if __name__ == "__main__":
    interpreter = Interpreter()
    ast = [
        VariableDeclaration('x', Literal(5)),
        VariableDeclaration('y', Literal(10)),
        PrintStatement(BinaryExpression('+', Identifier('x'), Identifier('y')))
    ]
    interpreter.interpret(ast)
